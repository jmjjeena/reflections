What happens when you initialize a repository? Why do you need to do it?

    -   A hidden git folder is created and inside it are files needed 
        for git to work as intended. You need to do it so that git program 
        recognises directory to work with.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

    -   Working directory is a place where all files are present. Staging area 
        is place where only files which you want to add to repository are present. 
        Repository is place where all commited files are present. Gives you more 
        flexibility on exactly what you want to commit to the repository.

How can you use the staging area to make sure you have one commit per logical
change?

    -   You can check what've you done in the working area and comparing it to 
        the staging area to make sure you have one commit per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    -   In case of experimental activity or in adding new features but not 
        wanting to touch master branch.

How do the diagrams help you visualize the branch structure?

   -   Graphically representing the branch structure of a repository helps 
       identifying commits that are reachable and which are unreachable.
       The graphical representation also helps in identifying the relationships 
       of the different branches with respect to the master (or production) branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    -   Merging two branches together results in the combining of all the 
        appropriate changes into one single master branch node.  The combined 
        branches result in the combining of commit histories of the two branches.  
        -   When displayed using "git log", the commit history are displayed in proper 
            time sequence. 
        -   To display the commit history showing the proer sequence of 
            commits use "git log --graph --oneline"



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
    -   Automatic:
		        Pros:- quick and easy.
		        Cons:- might not end up with a version with what you'd expect.
			         - potential conflicts between the two merged branches.
        Manual:
		        Pros:- highest control
		        Cons:- can be slower than autos.
